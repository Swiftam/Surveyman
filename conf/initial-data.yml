# you describe your data using the YAML notation here
# and then load them using Fixtures.load("data.yml")

# Test data

User(bob):
    email:          bob@gmail.com
    password:       secret
    firstName:      Bob
    lastName:       McFadden
    isAdmin:        true

User(jeff):
    email:          jeff@gmail.com
    password:       secret
    firstName:      Jeff
    lastName:       Tweed

Survey(loblawsSurvey):
    title:          Loblaws Survey
    createdAt:      2010-06-07
    owner:          jeff
    content:        >
                    Rar

Intercept(loblawsIntercept):
    survey:         loblawsSurvey
    uuid:           d8141a42-18c2-48f0-8f97-2f6c56d6a132
    label:          OnEntry Survey
    frequency:      95.2
    createdAt:      2010-06-07

Survey(firstBobSurvey):
    title:          About the model layer
    createdAt:      2009-06-14
    owner:          bob
    content:        >
                    The model has a central position in a Play! application. It is the domain-specific
                    representation of the information on which the application operates.

                    Martin fowler defines it as:

                    Responsible for representing concepts of the business, information about the
                    business situation, and business rules. State that reflects the business situation
                    is controlled and used here, even though the technical details of storing it are
                    delegated to the infrastructure. This layer is the heart of business software.

Survey(secondBobSurvey):
    title:          Just a test of YABE
    createdAt:      2009-03-25
    owner:          bob
    content:        >
                    Well, it's just a test.

Survey(jeffSurvey):
    title:          The MVC application
    createdAt:      2009-06-06
    owner:          jeff
    content:        >
                    A Play! application follows the MVC architectural pattern as applied to the
                    architecture of the Web.

                    This pattern splits the application into separate layers: the Presentation
                    layer and the Model layer. The Presentation layer is further split into a
                    View and a Controller layer.

